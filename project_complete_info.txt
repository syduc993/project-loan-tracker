================================================================================
TH√îNG TIN D·ª∞ √ÅN HO√ÄN CH·ªàNH
================================================================================
Th·ªùi gian t·∫°o: 2025-10-23 13:56:17
Th∆∞ m·ª•c g·ªëc: d:\Atino\extension\project-loan-tracker
================================================================================

üìÅ C·∫§U TR√öC THU M·ª§C
--------------------------------------------------
‚îú‚îÄ‚îÄ üìÅ src/
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ core/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ app.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ config.py
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÑ templating.py
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ routes/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ disbursement_plans.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ disbursements.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ invoices.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ pages.py
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÑ suppliers.py
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ schemas/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ __init__.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ disbursement.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ disbursement_plan.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ invoice.py
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÑ supplier.py
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ services/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÅ database/
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ üìÑ base.py
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ üìÑ disbursement.py
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ üìÑ disbursement_plan.py
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ üìÑ invoice.py
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ üìÑ schema.py
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ üìÑ supplier.py
‚îÇ   ‚îî‚îÄ‚îÄ üìÅ utils/
‚îÇ       ‚îî‚îÄ‚îÄ üìÑ interest_calculator.py
‚îú‚îÄ‚îÄ üìÅ static/
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ css/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÑ style.css
‚îÇ   ‚îî‚îÄ‚îÄ üìÅ js/
‚îÇ       ‚îú‚îÄ‚îÄ üìÅ ui/
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ common.js
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ disbursementUI.js
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ invoiceUI.js
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ planUI.js
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ üìÑ supplierUI.js
‚îÇ       ‚îú‚îÄ‚îÄ üìÑ api.js
‚îÇ       ‚îú‚îÄ‚îÄ üìÑ main.js
‚îÇ       ‚îî‚îÄ‚îÄ üìÑ state.js
‚îú‚îÄ‚îÄ üìÅ templates/
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ base.html
‚îÇ   ‚îî‚îÄ‚îÄ üìÑ home.html
‚îú‚îÄ‚îÄ üìÑ Get detail code.ipynb
‚îú‚îÄ‚îÄ üìÑ main.py
‚îú‚îÄ‚îÄ üìÑ project_complete_info.txt
‚îú‚îÄ‚îÄ üìÑ README.md
‚îî‚îÄ‚îÄ üìÑ requirements.txt


üìÑ DANH S√ÅCH T·∫§T C·∫¢ FILE
--------------------------------------------------
Get detail code.ipynb (9476 bytes)
main.py (151 bytes)
project_complete_info.txt (0 bytes)
README.md (1692 bytes)
requirements.txt (88 bytes)
src\core\app.py (1146 bytes)
src\core\config.py (210 bytes)
src\core\templating.py (347 bytes)
src\routes\disbursement_plans.py (3333 bytes)
src\routes\disbursements.py (2610 bytes)
src\routes\invoices.py (2698 bytes)
src\routes\pages.py (556 bytes)
src\routes\suppliers.py (2489 bytes)
src\schemas\__init__.py (0 bytes)
src\schemas\disbursement.py (1989 bytes)
src\schemas\disbursement_plan.py (668 bytes)
src\schemas\invoice.py (2150 bytes)
src\schemas\supplier.py (374 bytes)
src\services\database\base.py (1820 bytes)
src\services\database\disbursement.py (7150 bytes)
src\services\database\disbursement_plan.py (1557 bytes)
src\services\database\invoice.py (2062 bytes)
src\services\database\schema.py (2879 bytes)
src\services\database\supplier.py (1409 bytes)
src\utils\interest_calculator.py (3692 bytes)
static\css\style.css (5784 bytes)
static\js\api.js (2320 bytes)
static\js\main.js (6790 bytes)
static\js\state.js (405 bytes)
static\js\ui\common.js (4090 bytes)
static\js\ui\disbursementUI.js (4913 bytes)
static\js\ui\invoiceUI.js (5810 bytes)
static\js\ui\planUI.js (3324 bytes)
static\js\ui\supplierUI.js (2797 bytes)
templates\base.html (2243 bytes)
templates\home.html (5153 bytes)

T·ªïng c·ªông: 36 file

üíª N·ªòI DUNG T·∫§T C·∫¢ FILE CODE
================================================================================

============================================================
FILE: main.py
============================================================
import uvicorn
from src.core.app import app

if __name__ == "__main__":
    uvicorn.run("src.core.app:app", host="0.0.0.0", port=8000, reload=True)
============================================================

============================================================
FILE: project_complete_info.txt
============================================================

============================================================

============================================================
FILE: README.md
============================================================
-- B·∫£ng 1: Nh√† Cung C·∫•p
CREATE TABLE suppliers (
    id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    name TEXT NOT NULL,
    contact_info TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- B·∫£ng 2: K·∫ø Ho·∫°ch Gi·∫£i Ng√¢n
CREATE TABLE disbursement_plans (
    id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    name TEXT NOT NULL,
    description TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- B·∫£ng 3: H√≥a ƒê∆°n (li√™n k·∫øt v·ªõi K·∫ø ho·∫°ch)
CREATE TABLE invoices (
    id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    plan_id BIGINT REFERENCES disbursement_plans(id) ON DELETE CASCADE,
    supplier_id BIGINT REFERENCES suppliers(id) ON DELETE SET NULL,
    invoice_number TEXT NOT NULL,
    issue_date DATE NOT NULL,
    total_value NUMERIC(15, 2) NOT NULL,
    status TEXT DEFAULT 'Ch∆∞a thanh to√°n',
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- B·∫£ng 4: C√°c L·∫ßn Gi·∫£i Ng√¢n (li√™n k·∫øt v·ªõi K·∫ø ho·∫°ch)
-- THAY ƒê·ªîI QUAN TR·ªåNG: Li√™n k·∫øt tr·ª±c ti·∫øp v·ªõi plan_id
CREATE TABLE disbursements (
    id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    plan_id BIGINT REFERENCES disbursement_plans(id) ON DELETE CASCADE,
    
    -- K·∫ø ho·∫°ch v√† th·ª±c t·∫ø
    planned_date DATE,
    planned_amount NUMERIC(15, 2),
    actual_date DATE,
    actual_amount NUMERIC(15, 2),

    -- Th√¥ng tin t√†i ch√≠nh & kh·∫ø ∆∞·ªõc
    bank_name TEXT,
    loan_contract_number TEXT,
    loan_term_months INT,
    loan_interest_rate REAL,
    interest_amount NUMERIC(15, 2),
    interest_due_date DATE,
    principal_due_date DATE,
    
    created_at TIMESTAMPTZ DEFAULT NOW()
);


============================================================

============================================================
FILE: requirements.txt
============================================================
fastapi
uvicorn[standard]
pydantic-settings
jinja2
sqlalchemy[asyncio]>=2.0
asyncpg
============================================================

============================================================
FILE: src\core\app.py
============================================================
# File: src/core/app.py (ƒê√É S·ª¨A L·ªñI)

from fastapi import FastAPI
from fastapi.staticfiles import StaticFiles
from pathlib import Path

# Import routers
from src.routes import suppliers, invoices, pages, disbursement_plans, disbursements

# Import ƒë·ªëi t∆∞·ª£ng templates t·ª´ file m·ªõi
from .templating import templates 

app = FastAPI(title="Project Loan Tracker")

# X√°c ƒë·ªãnh ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c g·ªëc
BASE_DIR = Path(__file__).resolve().parent.parent.parent

# 1. Mount th∆∞ m·ª•c static
app.mount("/static", StaticFiles(directory=BASE_DIR / "static"), name="static")



# 3. G·∫Øn c√°c API Routers (gi·ªØ nguy√™n)

app.include_router(suppliers.router, prefix="/api/v1/suppliers", tags=["Suppliers"])
app.include_router(invoices.router, prefix="/api/v1/invoices", tags=["Invoices"])
app.include_router(disbursement_plans.router, prefix="/api/v1/plans", tags=["Disbursement Plans"])
app.include_router(disbursements.router, prefix="/api/v1/disbursements", tags=["Disbursements"])


# 4. G·∫Øn Page Router (ph·ª•c v·ª• HTML - gi·ªØ nguy√™n)
app.include_router(pages.router, tags=["Web Pages"])
============================================================

============================================================
FILE: src\core\config.py
============================================================
from pydantic_settings import BaseSettings

class Settings(BaseSettings):
    DATABASE_URL: str

    class Config:
        env_file = ".env"
        env_file_encoding = "utf-8"

settings = Settings()

============================================================

============================================================
FILE: src\core\templating.py
============================================================
# File: src/core/templating.py

from fastapi.templating import Jinja2Templates
from pathlib import Path

# X√°c ƒë·ªãnh ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c g·ªëc c·ªßa d·ª± √°n
BASE_DIR = Path(__file__).resolve().parent.parent.parent

# Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng templates ·ªü ƒë√¢y
templates = Jinja2Templates(directory=BASE_DIR / "templates")
============================================================

============================================================
FILE: src\routes\disbursement_plans.py
============================================================
from fastapi import APIRouter, Depends, HTTPException
from typing import List
from sqlalchemy.ext.asyncio import AsyncSession
from src.schemas.disbursement_plan import DisbursementPlanResponse, DisbursementPlanCreate, DisbursementPlanUpdate
from src.schemas.disbursement import GenerateInterestScheduleResponse
from src.services.database import disbursement_plan as plan_db
from src.services.database.base import get_db_session
from src.services.database.disbursement import generate_interest_schedule, delete_interest_schedule

router = APIRouter()

@router.get("", response_model=List[DisbursementPlanResponse])
async def get_all_disbursement_plans(db: AsyncSession = Depends(get_db_session)):
    return await plan_db.db_get_all_disbursement_plans(db)

@router.post("", response_model=DisbursementPlanResponse, status_code=201)
async def create_new_disbursement_plan(
    plan: DisbursementPlanCreate,
    db: AsyncSession = Depends(get_db_session)
):
    """API ƒë·ªÉ t·∫°o k·∫ø ho·∫°ch m·ªõi."""
    return await plan_db.db_create_disbursement_plan(db, plan)

@router.post("/{plan_id}/generate-interest-schedule", response_model=GenerateInterestScheduleResponse)
async def create_interest_schedule_for_plan(
    plan_id: int,
    db: AsyncSession = Depends(get_db_session)
):
    """T·∫°o l·ªãch tr·∫£ l√£i t·ª± ƒë·ªông cho to√†n b·ªô K·∫ø ho·∫°ch."""
    result = await generate_interest_schedule(db=db, plan_id=plan_id)
    if not result["success"]:
        raise HTTPException(status_code=400, detail=result["message"])
    return GenerateInterestScheduleResponse(**result)

@router.delete("/{plan_id}/interest-schedule")
async def remove_interest_schedule_for_plan(
    plan_id: int,
    db: AsyncSession = Depends(get_db_session)
):
    """X√≥a t·∫•t c·∫£ l·ªãch tr·∫£ l√£i c·ªßa m·ªôt K·∫ø ho·∫°ch."""
    result = await delete_interest_schedule(db=db, plan_id=plan_id)
    return result


@router.get("/{plan_id}", response_model=DisbursementPlanResponse)
async def read_plan_by_id(plan_id: int, db: AsyncSession = Depends(get_db_session)):
    """API ƒë·ªÉ l·∫•y th√¥ng tin chi ti·∫øt c·ªßa 1 k·∫ø ho·∫°ch."""
    db_plan = await plan_db.db_get_plan_by_id(db, plan_id=plan_id)
    if db_plan is None:
        raise HTTPException(status_code=404, detail="Disbursement plan not found")
    return db_plan

@router.put("/{plan_id}", response_model=DisbursementPlanResponse)
async def update_existing_plan(
    plan_id: int,
    plan_in: DisbursementPlanUpdate,
    db: AsyncSession = Depends(get_db_session)
):
    """API ƒë·ªÉ c·∫≠p nh·∫≠t th√¥ng tin k·∫ø ho·∫°ch."""
    db_plan = await plan_db.db_get_plan_by_id(db, plan_id=plan_id)
    if db_plan is None:
        raise HTTPException(status_code=404, detail="Disbursement plan not found")
    
    return await plan_db.db_update_plan(db, db_plan=db_plan, plan_in=plan_in)

@router.delete("/{plan_id}", status_code=204)
async def delete_existing_plan(plan_id: int, db: AsyncSession = Depends(get_db_session)):
    """API ƒë·ªÉ x√≥a k·∫ø ho·∫°ch."""
    db_plan = await plan_db.db_get_plan_by_id(db, plan_id=plan_id)
    if db_plan is None:
        raise HTTPException(status_code=404, detail="Disbursement plan not found")
    
    await plan_db.db_delete_plan(db, db_plan=db_plan)
    return None
============================================================

============================================================
FILE: src\routes\disbursements.py
============================================================
from fastapi import APIRouter, Depends, HTTPException
from typing import List
from sqlalchemy.ext.asyncio import AsyncSession
from src.schemas.disbursement import DisbursementResponse, DisbursementCreate, DisbursementUpdate
from src.services.database import disbursement as disbursement_db
from src.services.database.base import get_db_session

router = APIRouter()

@router.get("/plan/{plan_id}", response_model=List[DisbursementResponse])
async def get_disbursements_for_plan(
    plan_id: int,
    db: AsyncSession = Depends(get_db_session)
):
    return await disbursement_db.db_get_disbursements_by_plan_id(db, plan_id)

@router.post("/", response_model=DisbursementResponse, status_code=201)
async def create_new_disbursement(
    disbursement: DisbursementCreate,
    db: AsyncSession = Depends(get_db_session)
):
    return await disbursement_db.db_create_disbursement(db, disbursement)

@router.get("/{disbursement_id}", response_model=DisbursementResponse)
async def read_disbursement_by_id(disbursement_id: int, db: AsyncSession = Depends(get_db_session)):
    """API ƒë·ªÉ l·∫•y th√¥ng tin chi ti·∫øt c·ªßa 1 l·∫ßn gi·∫£i ng√¢n."""
    db_disbursement = await disbursement_db.db_get_disbursement_by_id(db, disbursement_id=disbursement_id)
    if db_disbursement is None:
        raise HTTPException(status_code=404, detail="Disbursement not found")
    return db_disbursement

@router.put("/{disbursement_id}", response_model=DisbursementResponse)
async def update_existing_disbursement(
    disbursement_id: int,
    disbursement_in: DisbursementUpdate,
    db: AsyncSession = Depends(get_db_session)
):
    """API ƒë·ªÉ c·∫≠p nh·∫≠t th√¥ng tin gi·∫£i ng√¢n."""
    db_disbursement = await disbursement_db.db_get_disbursement_by_id(db, disbursement_id=disbursement_id)
    if db_disbursement is None:
        raise HTTPException(status_code=404, detail="Disbursement not found")
    
    return await disbursement_db.db_update_disbursement(db, db_disbursement=db_disbursement, disbursement_in=disbursement_in)

@router.delete("/{disbursement_id}", status_code=204)
async def delete_existing_disbursement(disbursement_id: int, db: AsyncSession = Depends(get_db_session)):
    """API ƒë·ªÉ x√≥a m·ªôt l·∫ßn gi·∫£i ng√¢n."""
    db_disbursement = await disbursement_db.db_get_disbursement_by_id(db, disbursement_id=disbursement_id)
    if db_disbursement is None:
        raise HTTPException(status_code=404, detail="Disbursement not found")
    
    await disbursement_db.db_delete_disbursement(db, db_disbursement=db_disbursement)
    return None
============================================================

============================================================
FILE: src\routes\invoices.py
============================================================
from fastapi import APIRouter, HTTPException, Depends
from typing import List
from sqlalchemy.ext.asyncio import AsyncSession
from src.schemas.invoice import InvoiceCreate, InvoiceResponse, InvoiceWithSupplierResponse, InvoiceUpdate, InvoiceDetailResponse
from src.services.database import invoice as invoice_db
from src.services.database.base import get_db_session

router = APIRouter()


@router.get("/", response_model=List[InvoiceDetailResponse])
async def read_all_invoices(db: AsyncSession = Depends(get_db_session)):
    """L·∫•y danh s√°ch t·∫•t c·∫£ h√≥a ƒë∆°n."""
    return await invoice_db.db_get_all_invoices(db)

@router.post("/", response_model=InvoiceResponse, status_code=201)
async def create_new_invoice(
    invoice: InvoiceCreate,
    db: AsyncSession = Depends(get_db_session)
):
    try:
        return await invoice_db.db_create_invoice(db, invoice)
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))

@router.get("/plan/{plan_id}", response_model=List[InvoiceWithSupplierResponse])
async def read_invoices_for_plan(
    plan_id: int,
    db: AsyncSession = Depends(get_db_session)
):
    return await invoice_db.db_get_all_invoices_by_plan_id(db, plan_id)

@router.get("/{invoice_id}", response_model=InvoiceDetailResponse)
async def read_invoice_by_id(invoice_id: int, db: AsyncSession = Depends(get_db_session)):
    """API ƒë·ªÉ l·∫•y th√¥ng tin chi ti·∫øt c·ªßa 1 h√≥a ƒë∆°n."""
    db_invoice = await invoice_db.db_get_invoice_by_id(db, invoice_id=invoice_id)
    if db_invoice is None:
        raise HTTPException(status_code=404, detail="Invoice not found")
    return db_invoice

@router.put("/{invoice_id}", response_model=InvoiceResponse)
async def update_existing_invoice(
    invoice_id: int,
    invoice_in: InvoiceUpdate,
    db: AsyncSession = Depends(get_db_session)
):
    """API ƒë·ªÉ c·∫≠p nh·∫≠t th√¥ng tin h√≥a ƒë∆°n."""
    db_invoice = await invoice_db.db_get_invoice_by_id(db, invoice_id=invoice_id)
    if db_invoice is None:
        raise HTTPException(status_code=404, detail="Invoice not found")
    
    return await invoice_db.db_update_invoice(db, db_invoice=db_invoice, invoice_in=invoice_in)

@router.delete("/{invoice_id}", status_code=204)
async def delete_existing_invoice(invoice_id: int, db: AsyncSession = Depends(get_db_session)):
    """API ƒë·ªÉ x√≥a h√≥a ƒë∆°n."""
    db_invoice = await invoice_db.db_get_invoice_by_id(db, invoice_id=invoice_id)
    if db_invoice is None:
        raise HTTPException(status_code=404, detail="Invoice not found")
    
    await invoice_db.db_delete_invoice(db, db_invoice=db_invoice)
    return None
============================================================

============================================================
FILE: src\routes\pages.py
============================================================
# File: src/routes/pages.py (ƒê√É S·ª¨A L·ªñI)

from fastapi import APIRouter, Request
from fastapi.responses import HTMLResponse
# S·ª≠a d√≤ng import n√†y: thay v√¨ t·ª´ src.core.app, h√£y import t·ª´ file m·ªõi
from src.core.templating import templates

router = APIRouter()

@router.get("/", response_class=HTMLResponse)
async def home_page(request: Request):
    return templates.TemplateResponse(
        "home.html",
        {
            "request": request,
            "title": "Trang ch·ªß - Qu·∫£n l√Ω H√≥a ƒë∆°n"
        }
    )
============================================================

============================================================
FILE: src\routes\suppliers.py
============================================================
from fastapi import APIRouter, HTTPException, Depends
from typing import List
from sqlalchemy.ext.asyncio import AsyncSession
from src.schemas.supplier import SupplierCreate, SupplierResponse, SupplierUpdate
from src.services.database import supplier as supplier_db
from src.services.database.base import get_db_session

router = APIRouter()

@router.post("/", response_model=SupplierResponse, status_code=201)
async def create_new_supplier(
    supplier: SupplierCreate,
    db: AsyncSession = Depends(get_db_session)
):
    try:
        return await supplier_db.db_create_supplier(db, supplier)
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))

@router.get("/", response_model=List[SupplierResponse])
async def read_all_suppliers(db: AsyncSession = Depends(get_db_session)):
    return await supplier_db.db_get_all_suppliers(db)

@router.get("/{supplier_id}", response_model=SupplierResponse)
async def read_supplier_by_id(supplier_id: int, db: AsyncSession = Depends(get_db_session)):
    """API ƒë·ªÉ l·∫•y th√¥ng tin chi ti·∫øt c·ªßa 1 nh√† cung c·∫•p."""
    db_supplier = await supplier_db.db_get_supplier_by_id(db, supplier_id=supplier_id)
    if db_supplier is None:
        raise HTTPException(status_code=404, detail="Supplier not found")
    return db_supplier

@router.put("/{supplier_id}", response_model=SupplierResponse)
async def update_existing_supplier(
    supplier_id: int,
    supplier_in: SupplierUpdate,
    db: AsyncSession = Depends(get_db_session)
):
    """API ƒë·ªÉ c·∫≠p nh·∫≠t th√¥ng tin nh√† cung c·∫•p."""
    db_supplier = await supplier_db.db_get_supplier_by_id(db, supplier_id=supplier_id)
    if db_supplier is None:
        raise HTTPException(status_code=404, detail="Supplier not found")
    
    return await supplier_db.db_update_supplier(db, db_supplier=db_supplier, supplier_in=supplier_in)

@router.delete("/{supplier_id}", status_code=204)
async def delete_existing_supplier(supplier_id: int, db: AsyncSession = Depends(get_db_session)):
    """API ƒë·ªÉ x√≥a nh√† cung c·∫•p."""
    db_supplier = await supplier_db.db_get_supplier_by_id(db, supplier_id=supplier_id)
    if db_supplier is None:
        raise HTTPException(status_code=404, detail="Supplier not found")
    
    await supplier_db.db_delete_supplier(db, db_supplier=db_supplier)
    # Status 204 No Content kh√¥ng tr·∫£ v·ªÅ body
    return None

# --- K·∫æT TH√öC PH·∫¶N B·ªî SUNG ---
============================================================

============================================================
FILE: src\schemas\__init__.py
============================================================

============================================================

============================================================
FILE: src\schemas\disbursement.py
============================================================
from pydantic import BaseModel, Field
from typing import Optional
from datetime import date
from decimal import Decimal


class DisbursementBase(BaseModel):
    plan_id: int
    planned_date: Optional[date] = None
    planned_amount: Optional[Decimal] = None
    actual_date: Optional[date] = None
    actual_amount: Optional[Decimal] = None
    bank_name: Optional[str] = None
    loan_contract_number: Optional[str] = None
    loan_term_months: Optional[int] = None
    loan_interest_rate: Optional[float] = None
    interest_amount: Optional[Decimal] = None
    interest_due_date: Optional[date] = None
    principal_due_date: Optional[date] = None
    parent_disbursement_id: Optional[int] = None


class DisbursementCreate(DisbursementBase):
    pass


class DisbursementUpdate(BaseModel):
    planned_date: Optional[date] = None
    planned_amount: Optional[Decimal] = None
    actual_date: Optional[date] = None
    actual_amount: Optional[Decimal] = None
    bank_name: Optional[str] = None
    loan_contract_number: Optional[str] = None
    loan_term_months: Optional[int] = None
    loan_interest_rate: Optional[float] = None
    interest_amount: Optional[Decimal] = None
    interest_due_date: Optional[date] = None
    principal_due_date: Optional[date] = None
    parent_disbursement_id: Optional[int] = None


class DisbursementResponse(DisbursementBase):
    id: int
    created_at: date

    class Config:
        from_attributes = True


class GenerateInterestScheduleRequest(BaseModel):
    """Request ƒë·ªÉ t·∫°o l·ªãch tr·∫£ l√£i"""
    disbursement_id: int
    periodic_interest_day: Optional[int] = Field(None, ge=1, le=31, description="Ng√†y tr·∫£ l√£i h√†ng th√°ng (1-31). N·∫øu null th√¨ l·∫•y t·ª´ plan")


class GenerateInterestScheduleResponse(BaseModel):
    """Response sau khi t·∫°o l·ªãch tr·∫£ l√£i"""
    success: bool
    message: str
    schedules_created: int
    schedule_dates: list[date]

============================================================

============================================================
FILE: src\schemas\disbursement_plan.py
============================================================
from pydantic import BaseModel, Field
from typing import Optional
from datetime import datetime


class DisbursementPlanBase(BaseModel):
    name: str
    description: Optional[str] = None
    periodic_interest_day: int = Field(default=25, ge=1, le=31)


class DisbursementPlanCreate(DisbursementPlanBase):
    pass


class DisbursementPlanUpdate(BaseModel):
    name: Optional[str] = None
    description: Optional[str] = None
    periodic_interest_day: Optional[int] = Field(None, ge=1, le=31)


class DisbursementPlanResponse(DisbursementPlanBase):
    id: int
    created_at: datetime  

    class Config:
        from_attributes = True

============================================================

============================================================
FILE: src\schemas\invoice.py
============================================================
from pydantic import BaseModel, ConfigDict
from datetime import date
from typing import Optional

# L·ªõp c∆° s·ªü ch·ª©a c√°c tr∆∞·ªùng chung c·ªßa m·ªôt h√≥a ƒë∆°n
class InvoiceBase(BaseModel):
    plan_id: int
    supplier_id: int
    invoice_number: str
    issue_date: date
    total_value: float

# Schema d√πng ƒë·ªÉ T·∫†O M·ªöI m·ªôt h√≥a ƒë∆°n (d·ªØ li·ªáu ƒë·∫ßu v√†o)
class InvoiceCreate(InvoiceBase):
    pass # K·∫ø th·ª´a t·∫•t c·∫£ c√°c tr∆∞·ªùng t·ª´ InvoiceBase





# Schema d√πng ƒë·ªÉ TR·∫¢ V·ªÄ sau khi t·∫°o m·ªõi ho·∫∑c l·∫•y m·ªôt h√≥a ƒë∆°n
class InvoiceResponse(InvoiceBase):
    id: int
    status: str

    # C·∫•u h√¨nh ƒë·ªÉ Pydantic c√≥ th·ªÉ ƒë·ªçc d·ªØ li·ªáu t·ª´ object SQLAlchemy
    model_config = ConfigDict(from_attributes=True)


class SupplierResponse(BaseModel):
    model_config = ConfigDict(from_attributes=True)
    
    id: int
    name: str

class InvoiceWithSupplierResponse(BaseModel):
    model_config = ConfigDict(from_attributes=True)
    
    id: int
    invoice_number: str
    issue_date: date
    total_value: float
    supplier_id: int
    status: str
    # M·ªëi quan h·ªá n√†y cho ph√©p tr·∫£ v·ªÅ th√¥ng tin c·ªßa nh√† cung c·∫•p k√®m theo h√≥a ƒë∆°n
    supplier: Optional[SupplierResponse] = None

class InvoiceUpdate(BaseModel):
    plan_id: int | None = None         # B·ªï sung cho ph√©p s·ª≠a plan_id n·∫øu c·∫ßn
    supplier_id: int | None = None
    invoice_number: str | None = None
    issue_date: date | None = None
    total_value: float | None = None
    status: str | None = None


# Schema r√∫t g·ªçn cho Supplier khi hi·ªÉn th·ªã trong Invoice
class SupplierRef(BaseModel):
    id: int
    name: str
    model_config = ConfigDict(from_attributes=True)

# Schema r√∫t g·ªçn cho Plan khi hi·ªÉn th·ªã trong Invoice
class PlanRef(BaseModel):
    id: int
    name: str
    model_config = ConfigDict(from_attributes=True)

# Schema Invoice ƒë·∫ßy ƒë·ªß th√¥ng tin cho trang danh s√°ch
class InvoiceDetailResponse(InvoiceResponse):
    supplier: Optional[SupplierRef] = None
    plan: Optional[PlanRef] = None
============================================================

============================================================
FILE: src\schemas\supplier.py
============================================================
from pydantic import BaseModel

class SupplierBase(BaseModel):
    name: str
    contact_info: str | None = None

class SupplierCreate(SupplierBase):
    pass

class SupplierUpdate(BaseModel):
    name: str | None = None
    contact_info: str | None = None

class SupplierResponse(SupplierBase):
    id: int

    class Config:
        from_attributes = True
============================================================

============================================================
FILE: src\services\database\base.py
============================================================
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession, async_sessionmaker
from sqlalchemy.orm import declarative_base
from src.core.config import settings
import logging

logger = logging.getLogger(__name__)

# Base class cho ORM models
Base = declarative_base()

# --- B·∫ÆT ƒê·∫¶U PH·∫¶N S·ª¨A L·ªñI ---

# 1. L·∫•y URL t·ª´ file config ra m·ªôt bi·∫øn t·∫°m
db_url = settings.DATABASE_URL

# 2. Ki·ªÉm tra xem bi·∫øn DATABASE_URL c√≥ ƒë∆∞·ª£c thi·∫øt l·∫≠p hay kh√¥ng
if not db_url:
    raise ValueError("L·ªói: Bi·∫øn DATABASE_URL ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p trong file .env")

# 3. Ki·ªÉm tra v√† t·ª± ƒë·ªông s·ª≠a chu·ªói k·∫øt n·ªëi ƒë·ªÉ s·ª≠ d·ª•ng driver asyncpg
if db_url.startswith("postgresql://"):
    db_url = db_url.replace("postgresql://", "postgresql+asyncpg://", 1)
    logger.info("Chu·ªói k·∫øt n·ªëi ƒë√£ ƒë∆∞·ª£c t·ª± ƒë·ªông c·∫•u h√¨nh ƒë·ªÉ s·ª≠ d·ª•ng driver asyncpg.")

# --- K·∫æT TH√öC PH·∫¶N S·ª¨A L·ªñI ---


# T·∫°o async engine v·ªõi chu·ªói k·∫øt n·ªëi ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
engine = create_async_engine(
    db_url,  # <-- S·ª≠ d·ª•ng bi·∫øn db_url ƒë√£ ƒë∆∞·ª£c s·ª≠a
    pool_size=5,
    max_overflow=10,
    pool_timeout=30,
    pool_recycle=1800,
    pool_pre_ping=True,
    echo=False,
    future=True
)

# Session factory (Ph·∫ßn n√†y gi·ªØ nguy√™n)
AsyncSessionFactory = async_sessionmaker(
    engine,
    class_=AsyncSession,
    expire_on_commit=False
)

async def get_db_session():
    """Dependency ƒë·ªÉ inject database session v√†o routes"""
    async with AsyncSessionFactory() as session:
        try:
            yield session
            await session.commit()
        except Exception:
            await session.rollback()
            raise
        finally:
            await session.close()
============================================================

============================================================
FILE: src\services\database\disbursement.py
============================================================
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from .schema import Disbursement, DisbursementPlan  # Import c·∫£ hai
from src.schemas.disbursement import DisbursementCreate, DisbursementUpdate
from src.utils.interest_calculator import generate_interest_payment_dates
from datetime import date
from typing import List, Optional

# ==============================================================================
# H√ÄM T·∫†O L·ªäCH TR·∫¢ L√ÉI T·ª∞ ƒê·ªòNG (ƒê√É VI·∫æT L·∫†I THEO LOGIC M·ªöI)
# ==============================================================================

async def generate_interest_schedule(
    db: AsyncSession,
    plan_id: int  # <-- THAY ƒê·ªîI: D√πng plan_id
) -> dict:
    """
    T·∫°o l·ªãch tr·∫£ l√£i t·ª± ƒë·ªông cho m·ªôt K·∫ø Ho·∫°ch Gi·∫£i Ng√¢n
    
    Args:
        db: Database session
        plan_id: ID c·ªßa K·∫ø Ho·∫°ch (DisbursementPlan)
    
    Returns:
        dict v·ªõi th√¥ng tin k·∫øt qu·∫£
    """
    
    # 1. L·∫•y th√¥ng tin K·∫ø Ho·∫°ch (Plan)
    result = await db.execute(
        select(DisbursementPlan).where(DisbursementPlan.id == plan_id)
    )
    plan = result.scalar_one_or_none()
    
    if not plan:
        return {
            "success": False,
            "message": f"Kh√¥ng t√¨m th·∫•y K·∫ø ho·∫°ch (plan) v·ªõi id={plan_id}",
            "schedules_created": 0,
            "schedule_dates": []
        }
    
    # 2. Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc TR√äN PLAN
    if not plan.actual_date or not plan.principal_due_date:
        return {
            "success": False,
            "message": "K·∫ø ho·∫°ch n√†y ph·∫£i c√≥ 'Ng√†y th·ª±c t·∫ø vay' v√† 'Ng√†y ƒë√°o h·∫°n (tr·∫£ g·ªëc)'",
            "schedules_created": 0,
            "schedule_dates": []
        }
    
    # 3. L·∫•y ng√†y tr·∫£ l√£i ƒë·ªãnh k·ª≥ t·ª´ plan
    periodic_interest_day = plan.periodic_interest_day
    
    # 4. X√≥a c√°c d√≤ng tr·∫£ l√£i c≈© (n·∫øu c√≥) ƒë·ªÉ t·∫°o l·∫°i
    old_schedules_result = await db.execute(
        select(Disbursement).where(Disbursement.plan_id == plan_id)
    )
    old_schedules = old_schedules_result.scalars().all()
    
    count_deleted = 0
    for old_schedule in old_schedules:
        await db.delete(old_schedule)
        count_deleted += 1
    
    # 5. T√≠nh to√°n c√°c ng√†y tr·∫£ l√£i
    payment_dates = generate_interest_payment_dates(
        actual_date=plan.actual_date,
        principal_due_date=plan.principal_due_date,
        periodic_day=periodic_interest_day
    )
    
    if not payment_dates:
        return {
            "success": False,
            "message": "Kh√¥ng th·ªÉ t·∫°o l·ªãch tr·∫£ l√£i (ng√†y vay >= ng√†y tr·∫£ n·ª£ g·ªëc)",
            "schedules_created": 0,
            "schedule_dates": []
        }
    
    # 6. T·∫°o c√°c d√≤ng disbursement (l·ªãch l√£i)
    # Gi·∫£ ƒë·ªãnh schema.py ƒë√£ ƒë∆∞·ª£c s·ª≠a, b·∫£ng Disbursement gi·ªù R·∫§T ƒë∆°n gi·∫£n
    created_schedules = []
    for payment_date in payment_dates:
        new_schedule = Disbursement(
            plan_id=plan.id,
            interest_due_date=payment_date, # D√πng c·ªôt m·ªõi `interest_due_date`
            interest_amount=None,           # Ti·ªÅn l√£i s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t sau
            actual_date=None                # Ng√†y th·ª±c tr·∫£ s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t sau
        )
        db.add(new_schedule)
        created_schedules.append(new_schedule)
    
    await db.commit() # Commit ƒë·ªÉ l∆∞u c√°c thay ƒë·ªïi
    
    return {
        "success": True,
        "message": f"ƒê√£ x√≥a {count_deleted} l·ªãch c≈©. ƒê√£ t·∫°o {len(payment_dates)} k·ª≥ tr·∫£ l√£i m·ªõi th√†nh c√¥ng.",
        "schedules_created": len(payment_dates),
        "schedule_dates": payment_dates
    }

# ==============================================================================
# H√ÄM X√ìA L·ªäCH (C≈®NG ƒê∆Ø·ª¢C VI·∫æT L·∫†I THEO LOGIC M·ªöI)
# ==============================================================================

async def delete_interest_schedule(db: AsyncSession, plan_id: int) -> dict: # <-- THAY ƒê·ªîI
    """
    X√≥a t·∫•t c·∫£ l·ªãch tr·∫£ l√£i c·ªßa m·ªôt K·∫ø Ho·∫°ch
    
    Args:
        db: Database session
        plan_id: ID c·ªßa K·∫ø Ho·∫°ch (DisbursementPlan)
    
    Returns:
        dict v·ªõi th√¥ng tin k·∫øt qu·∫£
    """
    result = await db.execute(
        select(Disbursement).where(Disbursement.plan_id == plan_id) # <-- THAY ƒê·ªîI
    )
    schedules = result.scalars().all()
    
    count = len(schedules)
    for schedule in schedules:
        await db.delete(schedule)
    
    await db.commit()
    
    return {
        "success": True,
        "message": f"ƒê√£ x√≥a {count} k·ª≥ tr·∫£ l√£i",
        "schedules_deleted": count
    }


# ==============================================================================
# C√ÅC H√ÄM CRUD C∆† B·∫¢N (ƒê√É C·∫¨P NH·∫¨T THEO LOGIC M·ªöI)
# ==============================================================================

async def db_create_disbursement(db: AsyncSession, disbursement: DisbursementCreate):
    """
    T·∫°o m·ªôt d√≤ng l·ªãch s·ª≠ tr·∫£ l√£i (th∆∞·ªùng l√† th·ªß c√¥ng, kh√¥ng d√πng h√†m t·ª± ƒë·ªông)
    L∆ØU √ù: schema `DisbursementCreate` c·∫ßn ƒë∆∞·ª£c c·∫≠p nh·∫≠t
    """
    # H√†m n√†y gi·ªù s·∫Ω nh·∫≠n schema create m·ªõi
    # (schema.py cho DisbursementCreate c≈©ng c·∫ßn ƒë∆∞·ª£c s·ª≠a)
    new_disbursement = Disbursement(**disbursement.model_dump())
    db.add(new_disbursement)
    await db.flush()
    await db.refresh(new_disbursement)
    return new_disbursement

async def db_get_disbursements_by_plan_id(db: AsyncSession, plan_id: int):
    """L·∫•y t·∫•t c·∫£ c√°c k·ª≥ tr·∫£ l√£i c·ªßa m·ªôt k·∫ø ho·∫°ch."""
    result = await db.execute(
        select(Disbursement)
        .where(Disbursement.plan_id == plan_id)
        .order_by(Disbursement.interest_due_date) # S·∫Øp x·∫øp theo ng√†y tr·∫£ l√£i
    )
    return result.scalars().all()

async def db_get_disbursement_by_id(db: AsyncSession, disbursement_id: int) -> Disbursement | None:
    """L·∫•y m·ªôt k·ª≥ tr·∫£ l√£i theo ID."""
    result = await db.execute(select(Disbursement).where(Disbursement.id == disbursement_id))
    return result.scalars().first()

async def db_update_disbursement(db: AsyncSession, db_disbursement: Disbursement, disbursement_in: DisbursementUpdate) -> Disbursement:
    """
    C·∫≠p nh·∫≠t th√¥ng tin m·ªôt k·ª≥ tr·∫£ l√£i (v√≠ d·ª•: c·∫≠p nh·∫≠t s·ªë ti·ªÅn ƒë√£ tr·∫£)
    L∆ØU √ù: schema `DisbursementUpdate` c·∫ßn ƒë∆∞·ª£c c·∫≠p nh·∫≠t
    """
    update_data = disbursement_in.model_dump(exclude_unset=True)
    for key, value in update_data.items():
        setattr(db_disbursement, key, value)
    
    await db.flush()
    await db.refresh(db_disbursement)
    return db_disbursement

async def db_delete_disbursement(db: AsyncSession, db_disbursement: Disbursement):
    """X√≥a m·ªôt k·ª≥ tr·∫£ l√£i c·ª• th·ªÉ."""
    await db.delete(db_disbursement)
    await db.flush()
============================================================

============================================================
FILE: src\services\database\disbursement_plan.py
============================================================
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from .schema import DisbursementPlan
from src.schemas.disbursement_plan import DisbursementPlanCreate, DisbursementPlanUpdate

async def db_get_all_disbursement_plans(db: AsyncSession):
    result = await db.execute(
        select(DisbursementPlan).order_by(DisbursementPlan.name)
    )
    return result.scalars().all()

async def db_create_disbursement_plan(db: AsyncSession, plan: DisbursementPlanCreate) -> DisbursementPlan:
    """T·∫°o m·ªôt k·∫ø ho·∫°ch gi·∫£i ng√¢n m·ªõi."""
    new_plan = DisbursementPlan(**plan.model_dump())
    db.add(new_plan)
    await db.flush()
    await db.refresh(new_plan)
    return new_plan

async def db_get_plan_by_id(db: AsyncSession, plan_id: int) -> DisbursementPlan | None:
    """L·∫•y m·ªôt k·∫ø ho·∫°ch theo ID."""
    result = await db.execute(select(DisbursementPlan).where(DisbursementPlan.id == plan_id))
    return result.scalars().first()

async def db_update_plan(db: AsyncSession, db_plan: DisbursementPlan, plan_in: DisbursementPlanUpdate) -> DisbursementPlan:
    """C·∫≠p nh·∫≠t th√¥ng tin k·∫ø ho·∫°ch."""
    update_data = plan_in.model_dump(exclude_unset=True)
    for key, value in update_data.items():
        setattr(db_plan, key, value)
    
    await db.flush()
    await db.refresh(db_plan)
    return db_plan

async def db_delete_plan(db: AsyncSession, db_plan: DisbursementPlan):
    """X√≥a m·ªôt k·∫ø ho·∫°ch."""
    await db.delete(db_plan)
    await db.flush()
============================================================

============================================================
FILE: src\services\database\invoice.py
============================================================
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from sqlalchemy.orm import selectinload
from .schema import Invoice, Supplier
from src.schemas.invoice import InvoiceCreate, InvoiceUpdate



async def db_get_all_invoices(db: AsyncSession):
    """L·∫•y t·∫•t c·∫£ h√≥a ƒë∆°n k√®m th√¥ng tin NCC v√† K·∫ø ho·∫°ch."""
    result = await db.execute(
        select(Invoice)
        .options(
            selectinload(Invoice.supplier),
            selectinload(Invoice.plan)
        )
        .order_by(Invoice.issue_date.desc())
    )
    return result.scalars().all()


async def db_create_invoice(db: AsyncSession, invoice: InvoiceCreate):
    new_invoice = Invoice(**invoice.model_dump())
    db.add(new_invoice)
    await db.flush()
    await db.refresh(new_invoice)
    return new_invoice

async def db_get_all_invoices_by_plan_id(db: AsyncSession, plan_id: int):
    result = await db.execute(
        select(Invoice)
        .options(selectinload(Invoice.supplier))
        .where(Invoice.plan_id == plan_id)
        .order_by(Invoice.issue_date.desc())
    )
    return result.scalars().all()

async def db_get_invoice_by_id(db: AsyncSession, invoice_id: int) -> Invoice | None:
    result = await db.execute(
        select(Invoice)
        .options(
            selectinload(Invoice.supplier),
            selectinload(Invoice.plan)
        )
        .where(Invoice.id == invoice_id)
    )
    return result.scalars().first()

async def db_update_invoice(db: AsyncSession, db_invoice: Invoice, invoice_in: InvoiceUpdate) -> Invoice:
    """C·∫≠p nh·∫≠t th√¥ng tin h√≥a ƒë∆°n."""
    update_data = invoice_in.model_dump(exclude_unset=True)
    for key, value in update_data.items():
        setattr(db_invoice, key, value)
    
    await db.flush()
    await db.refresh(db_invoice)
    return db_invoice

async def db_delete_invoice(db: AsyncSession, db_invoice: Invoice):
    """X√≥a m·ªôt h√≥a ƒë∆°n."""
    await db.delete(db_invoice)
    await db.flush()
============================================================

============================================================
FILE: src\services\database\schema.py
============================================================
from sqlalchemy import Column, BigInteger, Text, Date, Numeric, Integer, Float, ForeignKey
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
from datetime import datetime
from .base import Base


class Supplier(Base):
    __tablename__ = "suppliers"
    
    id = Column(BigInteger, primary_key=True, autoincrement=True)
    name = Column(Text, nullable=False)
    contact_info = Column(Text)
    created_at = Column(Date, server_default=func.now())
    
    # Relationship
    invoices = relationship("Invoice", back_populates="supplier")


class DisbursementPlan(Base):
    __tablename__ = "disbursement_plans"
    
    id = Column(BigInteger, primary_key=True, autoincrement=True)
    name = Column(Text, nullable=False)
    description = Column(Text)
    periodic_interest_day = Column(Integer, default=25)  # ‚Üê TH√äM D√íNG N√ÄY
    created_at = Column(Date, server_default=func.now())
    actual_date = Column(Date)              # Ng√†y th·ª±c t·∫ø vay
    principal_due_date = Column(Date)       # Ng√†y ƒë√°o h·∫°n
    bank_name = Column(Text)                # (N√™n th√™m c·∫£ th√¥ng tin ng√¢n h√†ng ·ªü ƒë√¢y)
    loan_contract_number = Column(Text)     # (V√† s·ªë h·ª£p ƒë·ªìng)

    # Relationships
    invoices = relationship("Invoice", back_populates="plan", cascade="all, delete-orphan")
    disbursements = relationship("Disbursement", back_populates="plan", cascade="all, delete-orphan")


class Invoice(Base):
    __tablename__ = "invoices"
    
    id = Column(BigInteger, primary_key=True, autoincrement=True)
    plan_id = Column(BigInteger, ForeignKey("disbursement_plans.id", ondelete="CASCADE"))
    supplier_id = Column(BigInteger, ForeignKey("suppliers.id", ondelete="SET NULL"))
    invoice_number = Column(Text, nullable=False)
    issue_date = Column(Date, nullable=False)
    total_value = Column(Numeric(15, 2), nullable=False)
    status = Column(Text, default="Ch∆∞a thanh to√°n")
    created_at = Column(Date, server_default=func.now())
    
    # Relationships
    plan = relationship("DisbursementPlan", back_populates="invoices")
    supplier = relationship("Supplier", back_populates="invoices")


class Disbursement(Base):
    __tablename__ = "disbursements"
    
    id = Column(BigInteger, primary_key=True, autoincrement=True)
    plan_id = Column(BigInteger, ForeignKey("disbursement_plans.id", ondelete="CASCADE"))
    
    interest_due_date = Column(Date)  # Ng√†y ph·∫£i tr·∫£ l√£i (quan tr·ªçng nh·∫•t)
    interest_amount = Column(Numeric(15, 2)) # S·ªë ti·ªÅn l√£i (t√≠nh sau)
    actual_date = Column(Date) # C√≥ th·ªÉ d√πng c·ªôt n√†y ƒë·ªÉ l∆∞u NG√ÄY TH·ª∞C T·∫æ ƒê√É TR·∫¢
    
    created_at = Column(Date, server_default=func.now())
    
    # Relationships
    plan = relationship("DisbursementPlan", back_populates="disbursements")
============================================================

============================================================
FILE: src\services\database\supplier.py
============================================================
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from .schema import Supplier
from src.schemas.supplier import SupplierCreate, SupplierUpdate

async def db_create_supplier(db: AsyncSession, supplier: SupplierCreate):
    new_supplier = Supplier(**supplier.model_dump())
    db.add(new_supplier)
    await db.flush()
    await db.refresh(new_supplier)
    return new_supplier

async def db_get_all_suppliers(db: AsyncSession):
    result = await db.execute(select(Supplier).order_by(Supplier.id))
    return result.scalars().all()

async def db_get_supplier_by_id(db: AsyncSession, supplier_id: int) -> Supplier | None:
    """L·∫•y m·ªôt nh√† cung c·∫•p theo ID."""
    result = await db.execute(select(Supplier).where(Supplier.id == supplier_id))
    return result.scalars().first()

async def db_update_supplier(db: AsyncSession, db_supplier: Supplier, supplier_in: SupplierUpdate) -> Supplier:
    """C·∫≠p nh·∫≠t th√¥ng tin nh√† cung c·∫•p."""
    update_data = supplier_in.model_dump(exclude_unset=True)
    for key, value in update_data.items():
        setattr(db_supplier, key, value)
    
    await db.flush()
    await db.refresh(db_supplier)
    return db_supplier

async def db_delete_supplier(db: AsyncSession, db_supplier: Supplier):
    """X√≥a m·ªôt nh√† cung c·∫•p."""
    await db.delete(db_supplier)
    await db.flush()
============================================================

============================================================
FILE: src\utils\interest_calculator.py
============================================================
"""
Helper functions ƒë·ªÉ t√≠nh to√°n l·ªãch tr·∫£ l√£i
"""
from datetime import date, timedelta
from typing import List


def get_next_business_day(target_date: date) -> date:
    """
    N·∫øu ng√†y r∆°i v√†o th·ª© 7 (5) ho·∫∑c Ch·ªß nh·∫≠t (6), chuy·ªÉn sang th·ª© 2
    
    Args:
        target_date: Ng√†y c·∫ßn ki·ªÉm tra
    
    Returns:
        Ng√†y th·ª© 2 k·∫ø ti·∫øp n·∫øu l√† cu·ªëi tu·∫ßn, nguy√™n ng√†y n·∫øu kh√¥ng
    """
    # weekday(): 0=Monday, 1=Tuesday, ..., 5=Saturday, 6=Sunday
    while target_date.weekday() >= 5:  # 5=Saturday, 6=Sunday
        target_date += timedelta(days=1)
    return target_date


def generate_interest_payment_dates(
    actual_date: date,
    principal_due_date: date,
    periodic_day: int = 25
) -> List[date]:
    """
    Sinh ra c√°c ng√†y tr·∫£ l√£i h√†ng th√°ng
    
    Logic:
    1. N·∫øu ng√†y gi·∫£i ng√¢n >= 15 ‚Üí b·ªè qua th√°ng ƒë√≥, b·∫Øt ƒë·∫ßu t·ª´ th√°ng sau
    2. M·ªói th√°ng tr·∫£ v√†o ng√†y `periodic_day` (m·∫∑c ƒë·ªãnh 25)
    3. N·∫øu r∆°i th·ª© 7/CN ‚Üí chuy·ªÉn sang th·ª© 2
    4. Th√°ng cu·ªëi: d√πng `principal_due_date` thay v√¨ ng√†y periodic_day
    
    Args:
        actual_date: Ng√†y th·ª±c t·∫ø gi·∫£i ng√¢n
        principal_due_date: Ng√†y ƒë·∫øn h·∫°n tr·∫£ n·ª£ g·ªëc
        periodic_day: Ng√†y tr·∫£ l√£i h√†ng th√°ng (1-31)
    
    Returns:
        List c√°c ng√†y tr·∫£ l√£i ƒë√£ ƒëi·ªÅu ch·ªânh
    """
    if actual_date >= principal_due_date:
        return []
    
    payment_dates = []
    current_month_start = actual_date.replace(day=1)
    
    # Rule 1: N·∫øu ng√†y gi·∫£i ng√¢n >= 15 ‚Üí b·∫Øt ƒë·∫ßu t·ª´ th√°ng sau
    if actual_date.day >= 15:
        # Sang th√°ng sau
        if current_month_start.month == 12:
            current_month_start = current_month_start.replace(year=current_month_start.year + 1, month=1)
        else:
            current_month_start = current_month_start.replace(month=current_month_start.month + 1)
    
    # T·∫°o l·ªãch tr·∫£ l√£i t·ª´ng th√°ng
    while True:
        # T·∫°o ng√†y tr·∫£ l√£i cho th√°ng hi·ªán t·∫°i
        try:
            payment_date = current_month_start.replace(day=periodic_day)
        except ValueError:
            # Th√°ng kh√¥ng c√≥ ng√†y periodic_day (VD: th√°ng 2 c√≥ 28/29 ng√†y m√† periodic_day=30)
            # ‚Üí L·∫•y ng√†y cu·ªëi th√°ng
            if current_month_start.month == 12:
                next_month = current_month_start.replace(year=current_month_start.year + 1, month=1)
            else:
                next_month = current_month_start.replace(month=current_month_start.month + 1)
            payment_date = next_month - timedelta(days=1)
        
        # Rule 4: Th√°ng cu·ªëi ‚Üí d√πng principal_due_date
        if payment_date.year == principal_due_date.year and payment_date.month == principal_due_date.month:
            payment_date = principal_due_date
            payment_dates.append(payment_date)
            break
        
        # N·∫øu v∆∞·ª£t qu√° ng√†y tr·∫£ n·ª£ g·ªëc ‚Üí d·ª´ng
        if payment_date > principal_due_date:
            break
        
        # Rule 3: ƒêi·ªÅu ch·ªânh n·∫øu r∆°i th·ª© 7/CN (tr·ª´ th√°ng cu·ªëi)
        payment_date = get_next_business_day(payment_date)
        payment_dates.append(payment_date)
        
        # Sang th√°ng ti·∫øp theo
        if current_month_start.month == 12:
            current_month_start = current_month_start.replace(year=current_month_start.year + 1, month=1)
        else:
            current_month_start = current_month_start.replace(month=current_month_start.month + 1)
    
    return payment_dates
============================================================

============================================================
FILE: static\css\style.css
============================================================
/* FILE: static/css/style.css (THAY TH·∫æ TO√ÄN B·ªò) */

/* --- BI·∫æN M√ÄU V√Ä FONT CH·ªÆ --- */
:root {
    --primary-color: #1976d2; /* Blue */
    --primary-color-dark: #004ba0;
    --accent-color: #ff4081; /* Pink */
    --background-color: #f5f5f5;
    --surface-color: #ffffff;
    --text-color-primary: #212121;
    --text-color-secondary: #757575;
    --divider-color: #e0e0e0;
    --box-shadow: 0 2px 4px rgba(0,0,0,0.1), 0 2px 10px rgba(0,0,0,0.08);
}

/* --- THI·∫æT L·∫¨P C∆† B·∫¢N --- */
* {
    box-sizing: border-box;
}

body {
    font-family: 'Roboto', sans-serif;
    background-color: var(--background-color);
    color: var(--text-color-primary);
    margin: 0;
    line-height: 1.6;
}

/* --- LAYOUT CH√çNH --- */
.app-bar {
    background-color: var(--primary-color);
    color: white;
    padding: 16px 24px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    font-size: 1.25rem;
    font-weight: 500;
}

.main-container {
    padding: 24px;
    max-width: 1400px;
    margin: 0 auto;
}

.management-view {
    display: none; /* M·∫∑c ƒë·ªãnh ·∫©n c√°c view */
}

.management-view.active {
    display: block; /* Hi·ªán view ƒë∆∞·ª£c ch·ªçn */
}

/* --- CARD (KHUNG CH·ª®A N·ªòI DUNG) --- */
.card {
    background: var(--surface-color);
    border-radius: 8px;
    box-shadow: var(--box-shadow);
    padding: 24px;
    margin-top: 16px;
}

.card-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding-bottom: 16px;
    margin-bottom: 16px;
    border-bottom: 1px solid var(--divider-color);
}

.card-header h2 {
    margin: 0;
    font-size: 1.5rem;
    color: var(--primary-color);
}

/* --- BUTTON --- */
.btn {
    padding: 8px 16px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.9rem;
    font-weight: 500;
    text-transform: uppercase;
    transition: background-color 0.2s, box-shadow 0.2s;
    display: inline-flex;
    align-items: center;
    gap: 8px;
}

.btn-primary {
    background-color: var(--primary-color);
    color: white;
    box-shadow: 0 1px 3px rgba(0,0,0,0.12);
}
.btn-primary:hover {
    background-color: var(--primary-color-dark);
    box-shadow: 0 2px 5px rgba(0,0,0,0.2);
}

.icon-btn {
    background: transparent;
    border: none;
    cursor: pointer;
    padding: 6px;
    border-radius: 50%;
    color: var(--text-color-secondary);
}
.icon-btn:hover {
    background-color: rgba(0, 0, 0, 0.08);
}
.icon-btn .material-icons {
    font-size: 20px;
    vertical-align: middle;
}

/* --- B·∫¢NG D·ªÆ LI·ªÜU --- */
table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
}

th, td {
    padding: 12px 16px;
    border-bottom: 1px solid var(--divider-color);
    text-align: left;
}

th {
    font-weight: 500;
    color: var(--text-color-secondary);
    font-size: 0.85rem;
    text-transform: uppercase;
}

tr:last-child td {
    border-bottom: none;
}

tr:hover {
    background-color: #f9f9f9;
}

td.actions {
    text-align: right;
    white-space: nowrap;
}

/* --- MODAL (FORM POP-UP) --- */
.modal-backdrop {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s, visibility 0.3s;
}

.modal-backdrop.visible {
    opacity: 1;
    visibility: visible;
}

.modal-content {
    background: var(--surface-color);
    padding: 24px;
    border-radius: 8px;
    box-shadow: 0 5px 15px rgba(0,0,0,0.3);
    width: 90%;
    max-width: 500px;
    transform: translateY(-50px);
    transition: transform 0.3s;
}

.modal-backdrop.visible .modal-content {
    transform: translateY(0);
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 24px;
}

.modal-header h3 {
    margin: 0;
    font-size: 1.25rem;
}

.modal-body {
    margin-bottom: 24px;
}

/* --- FORM INPUT --- */
.form-group {
    margin-bottom: 16px;
}
.form-group label {
    display: block;
    margin-bottom: 8px;
    font-size: 0.9rem;
    color: var(--text-color-secondary);
}
.form-group input, .form-group textarea {
    width: 100%;
    padding: 10px;
    border: 1px solid var(--divider-color);
    border-radius: 4px;
    font-size: 1rem;
    font-family: 'Roboto', sans-serif;
}
.form-group input:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 0 2px rgba(25, 118, 210, 0.2);
}

.hidden {
    display: none !important;
}

/* Header v√† Navbar */
.app-bar {
    background-color: var(--primary-color);
    color: white;
    padding: 0;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    display: flex;
    align-items: center;
    justify-content: space-between;
}

.app-bar-title {
    font-size: 1.25rem;
    font-weight: 700;
    padding: 16px 24px;
}

.navbar {
    display: flex;
    gap: 8px;
    padding: 0 24px;
}

.nav-btn {
    background: transparent;
    color: white;
    border: none;
    padding: 16px 20px;
    cursor: pointer;
    font-size: 0.95rem;
    font-weight: 500;
    transition: background-color 0.2s;
    display: flex;
    align-items: center;
    gap: 8px;
    border-bottom: 3px solid transparent;
}

.nav-btn:hover {
    background-color: rgba(255,255,255,0.1);
}

.nav-btn.active {
    background-color: rgba(255,255,255,0.15);
    border-bottom: 3px solid white;
}

.nav-btn .material-icons {
    font-size: 20px;
}

============================================================

============================================================
FILE: static\js\api.js
============================================================
async function fetchAPI(endpoint, options = {}) {
    const headers = { 'Content-Type': 'application/json', ...options.headers };
    const response = await fetch(`/api/v1${endpoint}`, { ...options, headers });
    if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.detail || 'C√≥ l·ªói x·∫£y ra');
    }
    if (response.status === 204) return null;
    return response.json();
}

export const planAPI = {
    getAll: () => fetchAPI('/plans/'),
    getById: (id) => fetchAPI(`/plans/${id}`),
    create: (data) => fetchAPI('/plans/', { method: 'POST', body: JSON.stringify(data) }),
    update: (id, data) => fetchAPI(`/plans/${id}`, { method: 'PUT', body: JSON.stringify(data) }),
    delete: (id) => fetchAPI(`/plans/${id}`, { method: 'DELETE' }),
    generateSchedule: (planId) => fetchAPI(`/plans/${planId}/generate-interest-schedule`, { method: 'POST' }),
    deleteSchedule: (planId) => fetchAPI(`/plans/${planId}/interest-schedule`, { method: 'DELETE' }),
};

export const supplierAPI = {
    getAll: () => fetchAPI('/suppliers/'),
    getById: (id) => fetchAPI(`/suppliers/${id}`),
    create: (data) => fetchAPI('/suppliers/', { method: 'POST', body: JSON.stringify(data) }),
    update: (id, data) => fetchAPI(`/suppliers/${id}`, { method: 'PUT', body: JSON.stringify(data) }),
    delete: (id) => fetchAPI(`/suppliers/${id}`, { method: 'DELETE' }),
};

export const invoiceAPI = {
    getByPlanId: (planId) => fetchAPI(`/invoices/plan/${planId}`),
    getById: (id) => fetchAPI(`/invoices/${id}`),
    create: (data) => fetchAPI('/invoices/', { method: 'POST', body: JSON.stringify(data) }),
    update: (id, data) => fetchAPI(`/invoices/${id}`, { method: 'PUT', body: JSON.stringify(data) }),
    delete: (id) => fetchAPI(`/invoices/${id}`, { method: 'DELETE' }),
};

export const disbursementAPI = {
    getByPlanId: (planId) => fetchAPI(`/disbursements/plan/${planId}`),
    getById: (id) => fetchAPI(`/disbursements/${id}`),
    create: (data) => fetchAPI('/disbursements/', { method: 'POST', body: JSON.stringify(data) }),
    update: (id, data) => fetchAPI(`/disbursements/${id}`, { method: 'PUT', body: JSON.stringify(data) }),
    delete: (id) => fetchAPI(`/disbursements/${id}`, { method: 'DELETE' }),
};
============================================================

============================================================
FILE: static\js\main.js
============================================================
import state, { setState } from './state.js';
import { planAPI, supplierAPI, invoiceAPI, disbursementAPI } from './api.js';
import { DOM, showMainListView, showPlanDetailsView, showTabInMainView, openModal, closeModal, handleFormSubmit } from './ui/common.js';
import { loadPlans } from './ui/planUI.js';
import { loadSuppliers, loadSuppliersCache } from './ui/supplierUI.js';
import { loadInvoices, changeInvoicePage } from './ui/invoiceUI.js';
import { loadDisbursements } from './ui/disbursementUI.js';

// --- MAIN FUNCTION TO LOAD PLAN DETAILS ---
export async function loadPlanDetails(planId) {
    showPlanDetailsView();
    const planDetailsTitle = document.getElementById('plan-details-title');
    const planDetailsDescription = document.getElementById('plan-details-description');
    
    planDetailsTitle.textContent = "ƒêang t·∫£i chi ti·∫øt k·∫ø ho·∫°ch...";
    planDetailsDescription.textContent = "";

    try {
        const planData = await planAPI.getById(planId);
        setState({ selectedPlan: planData });
        
        planDetailsTitle.textContent = `Chi ti·∫øt cho K·∫ø ho·∫°ch: ${planData.name}`;
        planDetailsDescription.textContent = planData.description || '';
        
        // T·∫£i h√≥a ƒë∆°n v√† gi·∫£i ng√¢n song song
        await Promise.all([
            loadInvoices(planId),
            loadDisbursements(planId)
        ]);

    } catch (e) {
        planDetailsTitle.textContent = "L·ªói t·∫£i chi ti·∫øt k·∫ø ho·∫°ch";
        console.error(e);
    }
}

// --- EVENT LISTENERS ---
function setupEventListeners() {
    // Navigation
    DOM.navPlans.addEventListener('click', () => {
        showMainListView();
        showTabInMainView('plan-management-view');
        loadPlans();
    });

    DOM.navSuppliers.addEventListener('click', () => {
        showMainListView();
        showTabInMainView('supplier-management-view');
        loadSuppliers();
    });

    document.getElementById('back-to-list-btn').addEventListener('click', () => {
        showMainListView();
        showTabInMainView('plan-management-view');
        loadPlans();
    });

    // Add buttons
    document.getElementById('add-plan-btn').addEventListener('click', () => openModal('plan'));
    document.getElementById('add-supplier-btn').addEventListener('click', () => openModal('supplier'));
    document.getElementById('add-invoice-btn').addEventListener('click', () => openModal('invoice'));
    document.getElementById('add-disbursement-btn').addEventListener('click', () => openModal('disbursement'));

    // Modal
    document.getElementById('close-modal-btn').addEventListener('click', closeModal);
    DOM.modal.addEventListener('click', e => { if(e.target === DOM.modal) closeModal(); });
    DOM.entityForm.addEventListener('submit', handleFormSubmit);

    document.getElementById('generate-schedule-btn-auto').addEventListener('click', async () => {
        if (!state.selectedPlan || !state.selectedPlan.id) return;
        const plan = state.selectedPlan;
        if (confirm(`T·∫°o/C·∫≠p nh·∫≠t l·ªãch tr·∫£ l√£i cho k·∫ø ho·∫°ch "${plan.name}"? L·ªãch c≈© (n·∫øu c√≥) s·∫Ω b·ªã x√≥a.`)) {
            try {
                const result = await planAPI.generateSchedule(plan.id);
                alert(result.message);
                loadPlanDetails(plan.id);
            } catch (e) { alert(`L·ªói: ${e.message}`); }
        }
    });

    document.getElementById('delete-schedule-btn-auto').addEventListener('click', async () => {
        if (!state.selectedPlan || !state.selectedPlan.id) return;
        const plan = state.selectedPlan;
        if (confirm(`X√≥a to√†n b·ªô l·ªãch tr·∫£ l√£i c·ªßa k·∫ø ho·∫°ch "${plan.name}"?`)) {
            try {
                const result = await planAPI.deleteSchedule(plan.id);
                alert(result.message);
                loadPlanDetails(plan.id);
            } catch (e) { alert(`L·ªói: ${e.message}`); }
        }
    });


    // Delegated events for tables
    document.body.addEventListener('click', async (event) => {
        const target = event.target;
        
        // View plan details
        if (target.matches('.view-details-link')) {
            event.preventDefault();
            loadPlanDetails(target.closest('tr').dataset.id);
        }

        // Pagination for invoices
        const paginationBtn = target.closest('.pagination-btn');
        if (paginationBtn) {
            changeInvoicePage(parseInt(paginationBtn.dataset.page));
        }

        // Generic Edit/Delete buttons
        const iconBtn = target.closest('.icon-btn');
        if (iconBtn) {
            const row = iconBtn.closest('tr');
            if(!row) return;

            const id = row.dataset.id;
            const type = row.dataset.type;

            if (iconBtn.classList.contains('edit-btn')) {
                try {
                    let data;
                    if (type === 'plan') data = await planAPI.getById(id);
                    else if (type === 'supplier') data = await supplierAPI.getById(id);
                    else if (type === 'invoice') data = await invoiceAPI.getById(id);
                    else if (type === 'disbursement') data = await disbursementAPI.getById(id);
                    
                    if(data) openModal(type, data);

                } catch(e) { alert(e.message); }
            }
            
            if (iconBtn.classList.contains('delete-btn')) {
                if (confirm(`B·∫°n ch·∫Øc ch·∫Øn mu·ªën x√≥a m·ª•c (ID: ${id}) n√†y?`)) {
                    try {
                        if (type === 'plan') await planAPI.delete(id);
                        else if (type === 'supplier') { await supplierAPI.delete(id); loadSuppliersCache(); }
                        else if (type === 'invoice') await invoiceAPI.delete(id);
                        else if (type === 'disbursement') await disbursementAPI.delete(id);
                        
                        // Reload relevant data
                        if (type === 'plan' || type === 'supplier') {
                             loadPlans();
                             loadSuppliers();
                        }
                        else if (type === 'invoice' || type === 'disbursement') {
                            loadPlanDetails(state.selectedPlan.id);
                        }

                    } catch(e) { alert(e.message); }
                }
            }
        }
    });
}

document.addEventListener('DOMContentLoaded', () => {
    setupEventListeners();
    showMainListView();
    showTabInMainView('plan-management-view');
    loadPlans();
    loadSuppliersCache();
});
============================================================

============================================================
FILE: static\js\state.js
============================================================
const state = {
    currentEditingId: null,
    currentEntityType: null,
    selectedPlan: null,
    
    // Cache
    suppliersCache: [],
    
    // Pagination cho h√≥a ƒë∆°n
    invoicePagination: {
        currentPage: 1,
        invoicesPerPage: 5,
        allInvoices: []
    }
};

export function setState(newState) {
    Object.assign(state, newState);
}

export default state;
============================================================

============================================================
FILE: static\js\ui\common.js
============================================================
import state, { setState } from '../state.js';
import { getPlanFormHtml, handlePlanSubmit } from './planUI.js';
import { getSupplierFormHtml, handleSupplierSubmit } from './supplierUI.js';
import { getInvoiceFormHtml, handleInvoiceSubmit } from './invoiceUI.js';
import { getDisbursementFormHtml, handleDisbursementSubmit } from './disbursementUI.js';

export const DOM = {
    mainListView: document.getElementById('main-list-view'),
    planDetailsView: document.getElementById('plan-details-view'),
    modal: document.getElementById('entity-modal'),
    entityForm: document.getElementById('entity-form'),
    modalTitle: document.getElementById('modal-title'),
    planManagementView: document.getElementById('plan-management-view'),
    supplierManagementView: document.getElementById('supplier-management-view'),
    navPlans: document.getElementById('nav-plans'),
    navSuppliers: document.getElementById('nav-suppliers'),
};

export function formatCurrency(amount) {
    if (amount === null || amount === undefined) return '';
    return new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(amount);
}

export function formatDate(dateString) {
    if (!dateString) return '';
    return new Date(dateString + 'T00:00:00').toLocaleDateString('vi-VN');
}

export function showMainListView() {
    DOM.mainListView.style.display = 'block';
    DOM.planDetailsView.style.display = 'none';
    setState({ selectedPlan: null });
}

export function showPlanDetailsView() {
    DOM.mainListView.style.display = 'none';
    DOM.planDetailsView.style.display = 'block';
}

export function showTabInMainView(viewId) {
    if (DOM.planManagementView) DOM.planManagementView.style.display = (viewId === 'plan-management-view') ? 'block' : 'none';
    if (DOM.supplierManagementView) DOM.supplierManagementView.style.display = (viewId === 'supplier-management-view') ? 'block' : 'none';
    if (DOM.navPlans) DOM.navPlans.classList.toggle('active', viewId === 'plan-management-view');
    if (DOM.navSuppliers) DOM.navSuppliers.classList.toggle('active', viewId === 'supplier-management-view');
}

export function closeModal() {
    DOM.modal.classList.remove('visible');
    setTimeout(() => {
        DOM.modal.classList.add('hidden');
        DOM.entityForm.reset();
        setState({ currentEditingId: null, currentEntityType: null });
    }, 300);
}

export function openModal(type, entity = null) {
    setState({
        currentEntityType: type,
        currentEditingId: entity ? entity.id : null
    });
    
    let formHtml = '';
    let title = '';

    switch (type) {
        case 'plan':
            title = entity ? 'S·ª≠a K·∫ø ho·∫°ch' : 'Th√™m K·∫ø ho·∫°ch';
            formHtml = getPlanFormHtml(entity);
            break;
        case 'supplier':
            title = entity ? 'S·ª≠a Nh√† Cung C·∫•p' : 'Th√™m NCC';
            formHtml = getSupplierFormHtml(entity);
            break;
        case 'invoice':
            title = entity ? 'S·ª≠a H√≥a ƒë∆°n' : 'Th√™m H√≥a ƒë∆°n';
            formHtml = getInvoiceFormHtml(entity);
            break;
        case 'disbursement':
            title = entity ? 'S·ª≠a Gi·∫£i Ng√¢n' : 'Th√™m Gi·∫£i Ng√¢n';
            formHtml = getDisbursementFormHtml(entity);
            break;

    }

    DOM.modalTitle.textContent = title;
    DOM.entityForm.innerHTML = formHtml;
    DOM.modal.classList.remove('hidden');
    setTimeout(() => DOM.modal.classList.add('visible'), 10);
}

export async function handleFormSubmit(event) {
    event.preventDefault();
    switch (state.currentEntityType) {
        case 'plan':
            await handlePlanSubmit(event.target);
            break;
        case 'supplier':
            await handleSupplierSubmit(event.target);
            break;
        case 'invoice':
            await handleInvoiceSubmit(event.target);
            break;

        case 'disbursement':
            await handleDisbursementSubmit(event.target);
            break;

    }
}
============================================================

============================================================
FILE: static\js\ui\disbursementUI.js
============================================================
import { disbursementAPI } from '../api.js';
import state, { setState } from '../state.js';
import { formatCurrency, formatDate, closeModal } from './common.js';
import { loadPlanDetails } from '../main.js';

const tableContainer = document.getElementById('disbursements-table-container');

function renderDisbursementsTable(disbursements) {
    if (!disbursements || disbursements.length === 0) {
        tableContainer.innerHTML = '<p>Ch∆∞a c√≥ l·ªãch tr·∫£ l√£i n√†o. H√£y nh·∫•n "T·∫°o L·ªãch T·ª± ƒê·ªông".</p>';
        return;
    }

    const totalInterestAmount = disbursements.reduce((sum, d) => sum + parseFloat(d.interest_amount || 0), 0);

    let tableHtml = `
        <table>
            <thead>
                <tr>
                    <th>Ng√†y ƒë·∫øn h·∫°n tr·∫£ l√£i</th>
                    <th>S·ªë ti·ªÅn l√£i</th>
                    <th>Ng√†y th·ª±c tr·∫£</th>
                    <th class="actions">H√†nh ƒë·ªông</th>
                </tr>
            </thead>
            <tbody>`;

    disbursements.sort((a,b) => new Date(a.interest_due_date) - new Date(b.interest_due_date)).forEach(d => {
        tableHtml += `
            <tr data-id="${d.id}" data-type="disbursement">
                <td>${formatDate(d.interest_due_date)}</td>
                <td>${formatCurrency(d.interest_amount)}</td>
                <td>${formatDate(d.actual_date)}</td>
                <td class="actions">
                    <button class="icon-btn edit-btn" title="C·∫≠p nh·∫≠t tr·∫£ l√£i"><span class="material-icons">edit</span></button>
                    <button class="icon-btn delete-btn" title="X√≥a"><span class="material-icons">delete</span></button>
                </td>
            </tr>`;
    });
    
    tableHtml += `</tbody>
        <tfoot>
            <tr style="font-weight: bold; background-color: #f5f5f5;">
                <td style="text-align: right;">T·ªïng l√£i ƒë√£ tr·∫£:</td>
                <td>${formatCurrency(totalInterestAmount)}</td>
                <td colspan="2"></td>
            </tr>
        </tfoot>
    </table>`;
    tableContainer.innerHTML = tableHtml;
}

export async function loadDisbursements(planId) {
    tableContainer.innerHTML = '<p>ƒêang t·∫£i l·ªãch tr·∫£ l√£i...</p>';
    try {
        const disbursements = await disbursementAPI.getByPlanId(planId);
        renderDisbursementsTable(disbursements);
    } catch (e) {
        tableContainer.innerHTML = `<p style="color: red;">L·ªói t·∫£i l·ªãch tr·∫£ l√£i: ${e.message}</p>`;
    }
}

// H√†m t·∫°o HTML cho form
export function getDisbursementFormHtml(d) {
    return `
        <input type="hidden" name="plan_id" value="${d ? d.plan_id : state.selectedPlan.id}">
        
        <div class="form-group">
            <label>Ng√†y ƒë·∫øn h·∫°n tr·∫£ l√£i *</label>
            <input type="date" name="interest_due_date" required value="${d?.interest_due_date || ''}">
        </div>
        <div class="form-group">
            <label>S·ªë ti·ªÅn l√£i</label>
            <input type="number" step="any" name="interest_amount" placeholder="ƒê·ªÉ tr·ªëng n·∫øu ch∆∞a c√≥" value="${d?.interest_amount || ''}">
        </div>
        <div class="form-group">
            <label>Ng√†y th·ª±c tr·∫£</label>
            <input type="date" name="actual_date" value="${d?.actual_date || ''}">
        </div>

        <div class="modal-footer"><button type="submit" class="btn btn-primary">L∆∞u</button></div>
    `;
}

// H√†m x·ª≠ l√Ω submit form
export async function handleDisbursementSubmit(form) {
    const formData = new FormData(form);
    const data = Object.fromEntries(formData.entries());
    const id = state.currentEditingId;

    // Chuy·ªÉn ƒë·ªïi c√°c tr∆∞·ªùng s·ªë v√† null n·∫øu r·ªóng
    const fieldsToConvert = ['interest_amount'];
    for (const key of fieldsToConvert) {
        if (data[key] === '' || data[key] === null) {
            data[key] = null;
        } else {
            data[key] = Number(data[key]);
        }
    }
    // Chuy·ªÉn ƒë·ªïi ng√†y r·ªóng
    const dateFields = ['interest_due_date', 'actual_date'];
    for (const key of dateFields) {
        if (data[key] === '') {
            data[key] = null;
        }
    }

    try {
        if (id) {
            // Khi c·∫≠p nh·∫≠t, ch·ªâ g·ª≠i c√°c tr∆∞·ªùng ƒë∆∞·ª£c ph√©p trong schema Update
            const updateData = {
                interest_due_date: data.interest_due_date,
                interest_amount: data.interest_amount,
                actual_date: data.actual_date
            };
            await disbursementAPI.update(id, updateData);
        } else {
            await disbursementAPI.create(data);
        }
        closeModal();
        loadPlanDetails(state.selectedPlan.id);
    } catch (error) {
        alert(`L·ªói: ${error.message}`);
    }
}
============================================================

============================================================
FILE: static\js\ui\invoiceUI.js
============================================================
// File: static/js/ui/invoiceUI.js
// Logic UI cho H√≥a ƒë∆°n

import { invoiceAPI } from '../api.js';
import state, { setState } from '../state.js';
import { formatCurrency, formatDate, closeModal } from './common.js';
import { loadPlanDetails } from '../main.js'; // Import h√†m load ch√≠nh

const tableContainer = document.getElementById('invoices-table-container');

function renderInvoicesTable() {
    const { allInvoices, currentPage, invoicesPerPage } = state.invoicePagination;

    if (!allInvoices || allInvoices.length === 0) {
        tableContainer.innerHTML = '<p>Ch∆∞a c√≥ h√≥a ƒë∆°n n√†o cho k·∫ø ho·∫°ch n√†y.</p>';
        return;
    }
    
    const totalValue = allInvoices.reduce((sum, inv) => sum + parseFloat(inv.total_value || 0), 0);
    const totalPages = Math.ceil(allInvoices.length / invoicesPerPage);
    const paginatedInvoices = allInvoices.slice((currentPage - 1) * invoicesPerPage, currentPage * invoicesPerPage);
    
    // N√∫t ph√¢n trang ƒë∆∞·ª£c t·∫°o d∆∞·ªõi d·∫°ng chu·ªói HTML ƒë·ªÉ d·ªÖ d√†ng g√°n s·ª± ki·ªán sau n√†y
    const paginationControls = totalPages > 1 ? `
        <div class="pagination" style="margin-top: 16px; text-align: center; display: flex; align-items: center; justify-content: center; gap: 16px;">
            <button class="btn btn-secondary pagination-btn" data-page="${currentPage - 1}" ${currentPage === 1 ? 'disabled' : ''}>Tr∆∞·ªõc</button>
            <span style="font-weight: 500;">Trang ${currentPage} / ${totalPages}</span>
            <button class="btn btn-secondary pagination-btn" data-page="${currentPage + 1}" ${currentPage === totalPages ? 'disabled' : ''}>Sau</button>
        </div>` : '';

    tableContainer.innerHTML = `
        <table>
            <thead><tr><th>S·ªë Hƒê</th><th>Ng√†y Hƒê</th><th>NCC</th><th>Gi√° tr·ªã</th><th class="actions">H√†nh ƒë·ªông</th></tr></thead>
            <tbody>
            ${paginatedInvoices.map(inv => `
                <tr data-id="${inv.id}" data-type="invoice">
                    <td>${inv.invoice_number}</td><td>${formatDate(inv.issue_date)}</td>
                    <td>${inv.supplier?.name || 'N/A'}</td><td>${formatCurrency(inv.total_value)}</td>
                    <td class="actions">
                        <button class="icon-btn edit-btn" title="S·ª≠a"><span class="material-icons">edit</span></button>
                        <button class="icon-btn delete-btn" title="X√≥a"><span class="material-icons">delete</span></button>
                    </td>
                </tr>`).join('')}
            </tbody>
            <tfoot>
                <tr style="font-weight: bold; background-color: #f5f5f5;">
                    <td colspan="3" style="text-align: right;">T·ªïng c·ªông:</td>
                    <td>${formatCurrency(totalValue)}</td><td></td>
                </tr>
            </tfoot>
        </table>
        ${paginationControls}`;
}

export function changeInvoicePage(newPage) {
    const { allInvoices, invoicesPerPage } = state.invoicePagination;
    const totalPages = Math.ceil(allInvoices.length / invoicesPerPage);
    if (newPage >= 1 && newPage <= totalPages) {
        setState({ invoicePagination: { ...state.invoicePagination, currentPage: newPage } });
        renderInvoicesTable();
    }
}

export async function loadInvoices(planId) {
    tableContainer.innerHTML = '<p>ƒêang t·∫£i h√≥a ƒë∆°n...</p>';
    try {
        const invoices = await invoiceAPI.getByPlanId(planId);
        setState({ invoicePagination: { ...state.invoicePagination, allInvoices: invoices, currentPage: 1 } });
        renderInvoicesTable();
    } catch (e) {
        tableContainer.innerHTML = `<p style="color: red;">L·ªói t·∫£i h√≥a ƒë∆°n: ${e.message}</p>`;
    }
}

export function getInvoiceFormHtml(inv) {
    const supplierOptions = state.suppliersCache.map(s => 
        `<option value="${s.id}" ${inv && inv.supplier_id === s.id ? 'selected' : ''}>${s.name}</option>`
    ).join('');

    return `
        <input type="hidden" name="plan_id" value="${state.selectedPlan.id}">
        <div class="form-group"><label>S·ªë h√≥a ƒë∆°n *</label><input type="text" name="invoice_number" required value="${inv ? inv.invoice_number : ''}"></div>
        <div class="form-group"><label>Ng√†y h√≥a ƒë∆°n *</label><input type="date" name="issue_date" required value="${inv ? inv.issue_date : ''}"></div>
        <div class="form-group"><label>Gi√° tr·ªã *</label><input type="number" step="any" name="total_value" required value="${inv ? inv.total_value : ''}"></div>
        <div class="form-group"><label>Nh√† cung c·∫•p *</label><select name="supplier_id" required>${supplierOptions}</select></div>
        <div class="form-group"><label>Tr·∫°ng th√°i</label>
            <select name="status">
                <option value="Ch∆∞a thanh to√°n" ${inv && inv.status === 'Ch∆∞a thanh to√°n' ? 'selected' : ''}>Ch∆∞a thanh to√°n</option>
                <option value="ƒê√£ thanh to√°n" ${inv && inv.status === 'ƒê√£ thanh to√°n' ? 'selected' : ''}>ƒê√£ thanh to√°n</option>
            </select>
        </div>
        <div class="modal-footer"><button type="submit" class="btn btn-primary">L∆∞u</button></div>
    `;
}

export async function handleInvoiceSubmit(form) {
    const formData = new FormData(form);
    const data = Object.fromEntries(formData.entries());
    const id = state.currentEditingId;

    try {
        if (id) {
            await invoiceAPI.update(id, data);
        } else {
            await invoiceAPI.create(data);
        }
        closeModal();
        loadPlanDetails(state.selectedPlan.id); // T·∫£i l·∫°i to√†n b·ªô chi ti·∫øt k·∫ø ho·∫°ch
    } catch (error) {
        alert(`L·ªói: ${error.message}`);
    }
}
============================================================

============================================================
FILE: static\js\ui\planUI.js
============================================================
import { planAPI } from '../api.js';
import { closeModal } from './common.js';

const tableContainer = document.getElementById('plans-table-container');

function renderPlansTable(plans) {
    if (!plans || plans.length === 0) {
        tableContainer.innerHTML = '<p>Ch∆∞a c√≥ k·∫ø ho·∫°ch n√†o.</p>';
        return;
    }
    tableContainer.innerHTML = `
        <table>
            <thead><tr><th>T√™n K·∫ø ho·∫°ch</th><th>M√¥ t·∫£</th><th class="actions">H√†nh ƒë·ªông</th></tr></thead>
            <tbody>
                ${plans.map(p => `
                    <tr data-id="${p.id}" data-type="plan">
                        <td><a href="#" class="view-details-link">${p.name}</a></td>
                        <td>${p.description || ''}</td>
                        <td class="actions">
                            <button class="icon-btn edit-btn" title="S·ª≠a"><span class="material-icons">edit</span></button>
                            <button class="icon-btn delete-btn" title="X√≥a"><span class="material-icons">delete</span></button>
                        </td>
                    </tr>
                `).join('')}
            </tbody>
        </table>`;
}

export async function loadPlans() {
    tableContainer.innerHTML = '<p>ƒêang t·∫£i...</p>';
    try {
        const plans = await planAPI.getAll();
        renderPlansTable(plans);
    } catch (e) {
        tableContainer.innerHTML = `<p style="color: red;">L·ªói t·∫£i k·∫ø ho·∫°ch: ${e.message}</p>`;
    }
}


export function getPlanFormHtml(p) {
    return `
        <div class="form-group"><label>T√™n K·∫ø ho·∫°ch *</label><input type="text" name="name" required value="${p ? p.name : ''}"></div>
        <div class="form-group"><label>M√¥ t·∫£</label><textarea name="description" rows="3">${p ? p.description || '' : ''}</textarea></div>
        <div class="form-group"><label>Ng√†y tr·∫£ l√£i ƒë·ªãnh k·ª≥ *</label><input type="number" name="periodic_interest_day" required min="1" max="31" value="${p ? p.periodic_interest_day : '25'}"></div>
        
        <hr>
        <h4>Th√¥ng tin Kho·∫£n vay</h4>
        <div class="form-group"><label>Ng√†y th·ª±c t·∫ø vay</label><input type="date" name="actual_date" value="${p ? p.actual_date || '' : ''}"></div>
        <div class="form-group"><label>Ng√†y ƒë√°o h·∫°n (tr·∫£ g·ªëc)</label><input type="date" name="principal_due_date" value="${p ? p.principal_due_date || '' : ''}"></div>
        <div class="form-group"><label>Ng√¢n h√†ng</label><input type="text" name="bank_name" value="${p ? p.bank_name || '' : ''}"></div>
        <div class="form-group"><label>S·ªë Hƒê T√≠n d·ª•ng</label><input type="text" name="loan_contract_number" value="${p ? p.loan_contract_number || '' : ''}"></div>

        <div class="modal-footer"><button type="submit" class="btn btn-primary">L∆∞u</button></div>
    `;
}

export async function handlePlanSubmit(form) {
    const formData = new FormData(form);
    const data = Object.fromEntries(formData.entries());
    
    try {
        if (data.id) {
            await planAPI.update(data.id, data);
        } else {
            await planAPI.create(data);
        }
        closeModal();
        loadPlans();
    } catch (error) {
        alert(`L·ªói: ${error.message}`);
    }
}
============================================================

============================================================
FILE: static\js\ui\supplierUI.js
============================================================
import { supplierAPI } from '../api.js';
import { closeModal } from './common.js';
import state, { setState } from '../state.js';

const tableContainer = document.getElementById('suppliers-table-container');

function renderSuppliersTable(suppliers) {
    if (!suppliers || suppliers.length === 0) {
        tableContainer.innerHTML = '<p>Ch∆∞a c√≥ nh√† cung c·∫•p n√†o.</p>';
        return;
    }
    tableContainer.innerHTML = `
        <table>
            <thead><tr><th>T√™n NCC</th><th>Li√™n h·ªá</th><th class="actions">H√†nh ƒë·ªông</th></tr></thead>
            <tbody>
                ${suppliers.map(s => `
                    <tr data-id="${s.id}" data-type="supplier">
                        <td>${s.name}</td>
                        <td>${s.contact_info || ''}</td>
                        <td class="actions">
                            <button class="icon-btn edit-btn" title="S·ª≠a"><span class="material-icons">edit</span></button>
                            <button class="icon-btn delete-btn" title="X√≥a"><span class="material-icons">delete</span></button>
                        </td>
                    </tr>
                `).join('')}
            </tbody>
        </table>`;
}

export async function loadSuppliers() {
    tableContainer.innerHTML = '<p>ƒêang t·∫£i...</p>';
    try {
        const suppliers = await supplierAPI.getAll();
        renderSuppliersTable(suppliers);
    } catch (e) {
        tableContainer.innerHTML = `<p style="color: red;">L·ªói t·∫£i NCC: ${e.message}</p>`;
    }
}

export async function loadSuppliersCache() {
    try {
        const suppliers = await supplierAPI.getAll();
        setState({ suppliersCache: suppliers });
    } catch(e) { 
        console.error("L·ªói t·∫£i cache NCC:", e); 
    }
}

export function getSupplierFormHtml(s) {
    return `
        <div class="form-group"><label>T√™n NCC *</label><input type="text" name="name" required value="${s ? s.name : ''}"></div>
        <div class="form-group"><label>Li√™n h·ªá</label><textarea name="contact_info" rows="3">${s ? s.contact_info || '' : ''}</textarea></div>
        <div class="modal-footer"><button type="submit" class="btn btn-primary">L∆∞u</button></div>
    `;
}

export async function handleSupplierSubmit(form) {
    const formData = new FormData(form);
    const data = Object.fromEntries(formData.entries());
    const id = state.currentEditingId;

    try {
        if (id) {
            await supplierAPI.update(id, data);
        } else {
            await supplierAPI.create(data);
        }
        closeModal();
        loadSuppliers();
        loadSuppliersCache(); // C·∫≠p nh·∫≠t l·∫°i cache
    } catch (error) {
        alert(`L·ªói: ${error.message}`);
    }
}
============================================================


üìä TH·ªêNG K√ä
------------------------------
T·ªïng s·ªë file: 36
File code: 33
C√°c lo·∫°i file code:
  .css: 1 file
  .js: 8 file
  .md: 1 file
  .py: 21 file
  .txt: 2 file
